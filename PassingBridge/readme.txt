풀이

1. 풀이에 필요한 값 선언
  - answer : 반환 값(모든 트럭이 지나가기 위해 필요한 최소 시간)
  - bridge_weight : 현재 다리에 걸려있는 하중
  - remains : 다리를 건너기 위해 대기 중인 트럭의 수
  - bridge : 현재 다리의 상태(크기는 다리의 길이. 즉, 현재 다리 위의 상태를 나타내는 큐)

2. 반복문 구성(남은 대수가 0일 때 까지 반복)
  - 매 반복 시 시간은 1씩 증가
    2-1. 큐에 들어있는 자료의 개수가 다리의 길이와 일치할 경우
      - 큐에서 pop
      - 만약 pop 된 값이 0이 아닌 경우, remains가 1 감소
    2-2. 다리에 진입하지 않은 트럭이 남아 있는(!truck_weights.empty()) 경우
      2-2-1. 현재 다리가 비어 있는 경우
        - 트럭이 다리에 진입(큐에 push)
        - 다리가 받는 하중 증가(bridge_weight가 트럭의 무게 만큼 증가)
        - 다리에 진입을 대기중인 트럭 대수 감소(truck_weights의 맨 앞의 값 삭제)
      2-2-2. 다리에 트럭이 진입해 있는 경우
        2-2-2-1. 만약 다리가 다음 트럭을 받을 수 있는 경우(weight - bridge_weight >= truck_weights.front())
          - 이후 작업은 비어 있는 경우와 동일.
        2-2-2-2. 다리가 트럭을 받을 수 없는 경우
          - 기본 값으로 0을 큐에 push
     2-3. 다리에 진입하지 않은 트럭이 없고(truck_weights의 값이 없음) 다리에 트럭이 남아있는 경우
      - 기본 값(0)을 큐에 push
      
3. 카운트 한 시간을 반환
